package com.github.ericytsang.admin.portknock

import com.github.ericytsang.lib.concurrent.sleep
import org.junit.Ignore
import org.junit.Test
import java.security.KeyPair
import java.util.ArrayList

// ignoring test because the execution of the unit tests in this test must be
// coordinated between two computers
@Ignore
class PortKnockServerTest
{
    companion object
    {
        val CLIENT_KEY_PAIR = KeyPair(
            byteArrayOf(48,-127,-97,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,3,-127,-115,0,48,-127,-119,2,-127,-127,0,-127,-99,-104,5,-11,-98,19,-42,116,105,-70,6,-89,-105,94,82,43,73,61,78,-102,89,64,-33,-71,69,-78,55,-71,-122,-128,43,-63,7,-98,-16,61,-28,57,78,-10,-115,-100,-102,109,6,-10,-101,-63,9,-89,121,-46,61,-52,71,-93,103,120,-18,-56,-128,-47,-74,79,23,-50,-100,55,123,-62,-60,-26,112,-118,20,-117,116,9,-17,120,82,84,27,-90,-87,117,2,-41,-17,-44,75,15,107,105,-38,56,-117,9,-71,7,-46,-110,-17,-8,88,103,30,7,-28,-16,39,21,69,14,13,-84,89,86,-53,50,-13,112,105,-59,89,15,1,2,3,1,0,1).toRsaPublicKey(),
            byteArrayOf(48,-126,2,117,2,1,0,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,4,-126,2,95,48,-126,2,91,2,1,0,2,-127,-127,0,-127,-99,-104,5,-11,-98,19,-42,116,105,-70,6,-89,-105,94,82,43,73,61,78,-102,89,64,-33,-71,69,-78,55,-71,-122,-128,43,-63,7,-98,-16,61,-28,57,78,-10,-115,-100,-102,109,6,-10,-101,-63,9,-89,121,-46,61,-52,71,-93,103,120,-18,-56,-128,-47,-74,79,23,-50,-100,55,123,-62,-60,-26,112,-118,20,-117,116,9,-17,120,82,84,27,-90,-87,117,2,-41,-17,-44,75,15,107,105,-38,56,-117,9,-71,7,-46,-110,-17,-8,88,103,30,7,-28,-16,39,21,69,14,13,-84,89,86,-53,50,-13,112,105,-59,89,15,1,2,3,1,0,1,2,-127,-128,80,-25,88,123,-25,-53,10,-32,-30,123,23,-27,-115,120,91,36,120,-26,87,65,23,-16,-68,32,-87,89,-118,-101,99,-49,67,115,-116,34,64,-97,-2,81,-43,63,-89,127,-49,15,73,28,126,-109,-53,-45,69,-39,49,84,-25,-116,-109,-65,67,105,-16,119,15,-18,-113,44,-74,3,-56,-5,103,-19,22,38,0,121,16,-60,-56,-105,93,96,46,7,1,-35,71,27,-59,122,124,118,122,-25,43,89,104,119,94,75,-114,-14,76,-91,-7,52,-33,60,123,58,51,95,-60,-115,-121,98,-117,40,-84,-30,-77,24,112,48,31,97,13,-19,2,65,0,-36,-105,-89,-125,-53,-32,-49,-48,20,71,-59,-120,51,109,29,101,58,127,8,-81,-8,-31,111,55,48,-27,3,105,65,-59,127,15,-91,72,38,124,-42,93,-46,118,66,-54,56,-82,-72,69,49,-11,17,-107,-55,116,65,58,24,27,-114,65,2,-68,-66,35,8,-57,2,65,0,-106,107,-98,99,-15,109,95,52,-80,-53,-7,-99,-48,-96,-74,-24,61,3,-63,58,103,59,101,-88,32,-68,80,-110,-114,2,-1,-98,-13,-127,-122,-60,20,123,97,-72,72,-22,113,22,108,-93,118,119,26,-80,3,88,124,-66,84,-23,-101,32,-93,84,77,-74,-79,-9,2,64,66,110,9,44,79,-127,108,19,-91,-121,-41,-100,-92,-97,-1,114,52,-93,124,-30,65,120,-30,29,36,-60,82,-70,-89,-21,-23,-49,-76,94,125,-8,-86,53,-90,-29,-90,73,111,-72,110,21,-88,109,-68,-43,-10,-52,-29,-73,-78,-6,-39,100,10,-122,-4,91,96,-111,2,64,102,-109,30,-32,-62,-101,53,-24,69,-125,-29,69,-74,38,82,116,-114,95,8,30,-98,-107,7,-98,-98,44,44,-71,-77,-13,-31,-126,-16,68,-20,-76,-69,-50,-29,117,122,-21,-68,-112,113,39,11,58,-17,77,6,11,10,-115,-12,115,-107,32,-83,-96,104,-102,100,67,2,64,47,96,-80,82,56,-73,-67,-9,33,31,92,91,-104,44,115,66,42,-104,-19,-44,92,68,-15,102,-12,-76,4,85,-101,-72,-110,63,-62,-44,44,52,-66,-2,54,-31,85,99,-102,35,-123,51,-12,115,-123,92,-4,-11,87,-5,58,-85,-86,-111,72,-55,-1,-39,64,-10).toRsaPrivateKey())

        val SERVER_KEY_PAIR = KeyPair(
            byteArrayOf(48,-126,1,34,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,3,-126,1,15,0,48,-126,1,10,2,-126,1,1,0,-73,53,39,49,-89,62,-70,91,-14,-55,56,-36,-44,7,-28,-109,-75,-38,16,-36,-5,-106,-23,67,70,-29,-105,-108,38,-30,118,-96,-12,88,32,22,111,109,-32,69,119,40,-111,-102,109,24,-84,-64,41,106,72,-67,69,33,11,9,20,-5,72,-14,-71,-81,-79,-104,9,-39,87,-59,-3,75,-64,-49,-124,-28,119,-39,-79,-65,65,-17,-125,-68,-51,-1,71,7,-83,83,-38,86,113,-81,-111,45,54,26,53,-44,56,90,79,-22,-26,-43,-2,62,-20,65,21,62,-60,61,-96,-38,85,-113,40,-94,26,1,-89,-99,-94,4,9,66,-33,-77,-119,37,97,16,15,81,59,81,-46,103,-23,103,-27,16,75,-75,119,-82,-40,-70,24,71,-4,23,93,-84,-68,-107,49,97,-43,-84,108,46,-26,124,60,-125,55,-94,91,-21,20,-117,-89,-94,-10,-91,-50,30,86,-104,-125,99,-5,82,61,-106,-117,-81,-72,-85,-12,-47,35,-58,-62,64,-80,76,56,-128,124,-39,51,-29,-10,79,-80,15,-66,58,68,34,-55,-98,55,-3,47,118,121,-54,30,124,-46,74,34,115,-5,-82,74,60,-94,43,-95,122,-75,-118,6,43,-71,-29,-58,-27,-112,20,-117,110,-89,83,-13,4,-13,11,5,-112,39,-25,2,3,1,0,1).toRsaPublicKey(),
            byteArrayOf(48,-126,4,-66,2,1,0,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,4,-126,4,-88,48,-126,4,-92,2,1,0,2,-126,1,1,0,-73,53,39,49,-89,62,-70,91,-14,-55,56,-36,-44,7,-28,-109,-75,-38,16,-36,-5,-106,-23,67,70,-29,-105,-108,38,-30,118,-96,-12,88,32,22,111,109,-32,69,119,40,-111,-102,109,24,-84,-64,41,106,72,-67,69,33,11,9,20,-5,72,-14,-71,-81,-79,-104,9,-39,87,-59,-3,75,-64,-49,-124,-28,119,-39,-79,-65,65,-17,-125,-68,-51,-1,71,7,-83,83,-38,86,113,-81,-111,45,54,26,53,-44,56,90,79,-22,-26,-43,-2,62,-20,65,21,62,-60,61,-96,-38,85,-113,40,-94,26,1,-89,-99,-94,4,9,66,-33,-77,-119,37,97,16,15,81,59,81,-46,103,-23,103,-27,16,75,-75,119,-82,-40,-70,24,71,-4,23,93,-84,-68,-107,49,97,-43,-84,108,46,-26,124,60,-125,55,-94,91,-21,20,-117,-89,-94,-10,-91,-50,30,86,-104,-125,99,-5,82,61,-106,-117,-81,-72,-85,-12,-47,35,-58,-62,64,-80,76,56,-128,124,-39,51,-29,-10,79,-80,15,-66,58,68,34,-55,-98,55,-3,47,118,121,-54,30,124,-46,74,34,115,-5,-82,74,60,-94,43,-95,122,-75,-118,6,43,-71,-29,-58,-27,-112,20,-117,110,-89,83,-13,4,-13,11,5,-112,39,-25,2,3,1,0,1,2,-126,1,0,96,-58,-32,36,87,127,72,60,39,-4,-23,95,-91,85,98,6,48,-22,-73,59,-76,94,-36,107,96,119,-6,-21,20,-69,78,4,-23,-19,-33,77,90,-95,68,-10,12,-30,-50,63,47,-33,-9,-23,46,55,105,-93,41,112,49,-1,35,41,54,56,-103,-93,-40,-127,66,-70,-97,-90,3,-114,79,-108,-113,83,-116,-121,-33,95,-13,121,-115,50,95,-14,-72,87,-78,-44,119,-94,112,61,88,-57,-12,43,86,65,-5,94,-95,-106,-87,71,99,29,99,-7,97,58,-99,-71,28,78,25,34,29,73,-69,-55,33,-4,-97,-57,-40,8,-114,87,-57,-36,-44,-90,42,110,54,9,-53,96,26,-119,103,-80,-105,106,103,98,-27,39,0,48,-128,8,33,-103,21,96,71,-61,-44,46,32,15,111,-44,96,-80,82,25,104,97,37,65,65,-98,109,-36,-78,16,-103,-39,-11,-37,104,-90,-75,101,80,49,89,97,77,33,67,-2,30,63,-68,100,-37,82,-14,-84,93,90,31,23,80,-69,-90,-34,86,-82,37,-115,-24,35,-7,8,9,-6,16,-127,47,72,-39,13,-71,12,-123,40,30,1,-28,45,-36,-101,25,-51,51,69,85,-2,-105,-116,36,-102,-83,35,-97,-105,-20,94,54,80,-17,-15,2,-127,-127,0,-22,29,79,100,106,61,-1,-36,98,27,6,117,-9,-58,59,-64,-27,2,53,-118,27,70,-98,-4,-59,-109,114,-127,49,112,-27,109,111,4,30,-37,101,-100,119,110,-60,95,93,80,59,-50,-25,-102,-80,-105,-120,-60,126,34,-93,-86,39,-63,-66,16,-101,-61,16,77,75,5,-34,-101,-106,54,7,113,-18,-95,85,-21,16,20,33,-87,75,2,-102,-65,-70,-51,-67,113,27,92,22,-30,113,71,-23,-39,85,61,107,42,-46,-14,50,-9,103,24,23,65,-68,78,73,-8,4,-78,-119,54,80,-51,83,-14,-84,-5,-63,53,48,4,41,-103,2,-127,-127,0,-56,85,-111,-23,45,29,57,-2,-103,-8,127,117,-111,49,-41,-8,48,-62,1,31,-56,-89,105,114,-47,15,40,-96,-6,-14,-23,-52,82,-38,-116,22,60,54,78,48,-42,107,101,86,-35,58,-52,95,2,123,78,69,124,-3,36,-38,-126,-116,-104,-96,40,-93,-12,102,-8,26,-63,-103,-75,-116,-37,-104,-57,98,-114,-107,-18,-126,-10,41,-2,70,-63,-4,93,98,48,17,92,95,72,-110,71,47,-73,-24,-114,-64,-87,76,-114,-27,-56,100,118,125,-23,-3,-115,-56,-86,42,105,-95,-18,6,8,-75,-106,-36,-48,19,-29,71,-115,-80,-51,127,2,-127,-127,0,-24,-126,-77,-106,-58,-19,76,111,84,0,3,42,-90,41,-6,-82,88,-61,24,-23,80,-83,-110,-72,-8,-128,-73,-8,23,98,72,121,-89,8,48,-99,53,13,112,-112,81,-9,100,117,-118,-16,-78,-108,-81,77,-48,71,85,-2,-111,13,44,-18,-2,21,0,-99,122,83,73,111,74,-26,-69,8,109,-36,121,99,66,49,114,-122,-117,-25,-42,-41,127,89,107,-19,105,120,43,-12,9,-58,91,59,80,-60,-56,35,119,-117,-48,117,58,-88,-5,122,-79,-98,87,-90,105,80,41,90,39,108,10,83,-30,75,-30,1,38,-95,-20,78,54,1,2,-127,-128,95,-73,-54,-28,127,98,-76,127,-6,111,41,-17,49,117,-128,60,28,-121,-59,99,-69,74,-119,-18,-117,6,-44,33,-66,101,107,-31,-19,64,112,-88,123,18,115,95,-112,67,118,2,-1,-25,5,24,-20,37,-96,43,65,97,-18,70,-35,19,114,37,43,-27,-46,115,-108,93,-84,92,-43,-54,-68,109,-115,-18,-128,52,16,-26,-49,-39,22,-98,22,55,-113,34,-57,-42,-77,-84,-17,14,-67,38,-122,-105,126,5,125,-98,-113,-76,40,-128,31,-63,95,-104,127,50,-2,99,15,95,-120,75,-89,-61,-93,-106,83,112,-3,42,6,0,16,-33,2,-127,-127,0,-74,48,32,-108,-80,6,34,-49,89,-112,-9,54,65,114,99,-108,122,-35,127,52,-29,-120,62,54,56,-62,113,39,58,-26,27,88,-69,-2,-61,37,29,-115,7,15,-100,-99,103,-50,14,-40,-89,-35,72,-118,-25,75,99,121,59,69,7,-108,88,23,8,-41,20,16,-66,-89,-35,-60,-50,81,-98,37,0,7,78,72,-68,36,-118,71,57,115,20,54,-37,122,-4,-67,-38,-10,72,20,-45,39,-102,57,113,-9,-66,-80,-101,8,127,-22,-65,-108,82,-87,-26,-84,112,-2,-121,-127,-113,-51,63,19,-67,127,-14,94,-35,64,2,115,-26,-128).toRsaPrivateKey())

        const val KNOCK_PORT = 51268

        const val CONTROL_PORT = 62513
    }

    val printFirewall = object:Firewall
    {
        override fun allow(connectionSignature:Set<ConnectionSignature>)
        {
            println("allow ${connectionSignature.first()}")
        }

        override fun disallow(connectionSignature:Set<ConnectionSignature>)
        {
            println("disallow ${connectionSignature.first()}")
        }
    }

    val printPersister = object:PortKnockServer.Persister
    {
        override fun get(publicKey:List<Byte>):ClientInfo?
        {
            println("printPersister[${publicKey.hashCode()}]")
            return ClientInfo(100,CLIENT_KEY_PAIR.public.encoded.mapTo(ArrayList()){it},"custom client")
        }

        override fun set(publicKey:List<Byte>,client:ClientInfo)
        {
            println("printPersister[${publicKey.hashCode()}] = $client")
        }
    }

    @Test
    fun server()
    {
        val server = PortKnockServer(printPersister,printFirewall,SERVER_KEY_PAIR,KNOCK_PORT,CONTROL_PORT)
        sleep(120000)
    }
}
